variant: fcos
version: 1.5.0
passwd:
  users:
    - name: root
      groups:
        - root
      ssh_authorized_keys:
        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDFPly2MYEeh4FtFtftOa0qasGW4VNIzYv/ZzheQ/dFs martin@fedora
systemd:
  units:
    - name: docker.service
      mask: true

    - name: telegraf-env.service
      enabled: true
      contents: |
        [Unit]
        Description=Retrieve token from Vault for telegraf
        ConditionPathExists=/root/.vault-token
        ConditionPathExists=!/etc/telegraf.token
        
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/bin/bash -c '/usr/bin/podman run -e BAO_ADDR=https://openbao.hnatekmar.xyz -e VAULT_TOKEN=$(cat /root/.vault-token) -ti quay.io/openbao/openbao kv get -format=json -field=influx_token secret/servers/common | tr -d \"  > /etc/telegraf.token'
        
        [Install]
        WantedBy=default.target

    - name: telegraf.service
      enabled: true
      contents: |
        [Unit]
        Description=The plugin-driven server agent for reporting metrics into InfluxDB
        Documentation=https://github.com/influxdata/telegraf
        After=network.target
        ConditionPathExists=/etc/telegraf.token

        [Service]
        Type=simple
        ExecStart=/bin/bash /usr/local/bin/run-telegraf
        Restart=on-failure
        StandardOutput=syslog
        StandardError=syslog

        [Install]
        WantedBy=multi-user.target

    - name: rpm-ostree-install-base.service
      enabled: true
      contents: |
        [Unit]
        Description=Layer vim with rpm-ostree
        Wants=network-online.target
        After=network-online.target

        # We run before `zincati.service` to avoid conflicting rpm-ostree
        # transactions.
        Before=zincati.service
        ConditionPathExists=!/var/lib/%N.stamp

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        # `--allow-inactive` ensures that rpm-ostree does not return an error
        # if the package is already installed. This is useful if the package is
        # added to the root image in a future Fedora CoreOS release as it will
        # prevent the service from failing.
        ExecStart=/usr/bin/rpm-ostree install --allow-inactive -y vim telegraf
        ExecStart=/bin/touch /var/lib/%N.stamp
        ExecStart=/bin/systemctl --no-block reboot

        [Install]
        WantedBy=multi-user.target

    - name: containerd.service
      enabled: true
      dropins:
        - name: 99-proxy.conf
          contents: |
            [Service]
            EnvironmentFile=/etc/proxy.env
storage:
  directories:
    - path: /etc/ucore-autorebase
      mode: 0754
  links:
    - path: /etc/localtime
      target: ../usr/share/zoneinfo/Europe/Prague
  files:
    - path: /usr/local/bin/run-telegraf
      mode: 0755
      contents:
        inline: |
          #!/bin/bash
          
          export CUSTOM_TOKEN=$(cat /etc/telegraf.token | tr -d '\r')
          
          /usr/bin/telegraf --config /etc/telegraf/custom-telegraf.conf

    - path: /etc/telegraf/custom-telegraf.conf
      mode: 0644
      contents:
        inline: |
          [agent]
          ## Default data collection interval for all inputs
          interval = "10s"
          ## Rounds collection interval to 'interval'
          ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
          round_interval = true

          ## Telegraf will send metrics to outputs in batches of at most
          ## metric_batch_size metrics.
          ## This controls the size of writes that Telegraf sends to output plugins.
          metric_batch_size = 1000

          ## Maximum number of unwritten metrics per output.  Increasing this value
          ## allows for longer periods of output downtime without dropping metrics at the
          ## cost of higher maximum memory usage.
          metric_buffer_limit = 10000

          ## Collection jitter is used to jitter the collection by a random amount.
          ## Each plugin will sleep for a random time within jitter before collecting.
          ## This can be used to avoid many plugins querying things like sysfs at the
          ## same time, which can have a measurable effect on the system.
          collection_jitter = "0s"

          ## Collection offset is used to shift the collection by the given amount.
          ## This can be be used to avoid many plugins querying constraint devices
          ## at the same time by manually scheduling them in time.
          # collection_offset = "0s"

          ## Default flushing interval for all outputs. Maximum flush_interval will be
          ## flush_interval + flush_jitter
          flush_interval = "10s"
          ## Jitter the flush interval by a random amount. This is primarily to avoid
          ## large write spikes for users running a large number of telegraf instances.
          ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
          flush_jitter = "0s"

          ## Collected metrics are rounded to the precision specified. Precision is
          ## specified as an interval with an integer + unit (e.g. 0s, 10ms, 2us, 4s).
          ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
          ##
          ## By default or when set to "0s", precision will be set to the same
          ## timestamp order as the collection interval, with the maximum being 1s:
          ##   ie, when interval = "10s", precision will be "1s"
          ##       when interval = "250ms", precision will be "1ms"
          ##
          ## Precision will NOT be used for service inputs. It is up to each individual
          ## service input to set the timestamp at the appropriate precision.
          precision = "0s"

          ## Log at debug level.
          # debug = false
          ## Log only error level messages.
          # quiet = false

          ## Log format controls the way messages are logged and can be one of "text",
          ## "structured" or, on Windows, "eventlog".
          # logformat = "text"

          ## Message key for structured logs, to override the default of "msg".
          ## Ignored if `logformat` is not "structured".
          # structured_log_message_key = "message"

          ## Name of the file to be logged to or stderr if unset or empty. This
          ## setting is ignored for the "eventlog" format.
          # logfile = ""

          ## The logfile will be rotated after the time interval specified.  When set
          ## to 0 no time based rotation is performed.  Logs are rotated only when
          ## written to, if there is no log activity rotation may be delayed.
          # logfile_rotation_interval = "0h"

          ## The logfile will be rotated when it becomes larger than the specified
          ## size.  When set to 0 no size based rotation is performed.
          # logfile_rotation_max_size = "0MB"

          ## Maximum number of rotated archives to keep, any older logs are deleted.
          ## If set to -1, no archives are removed.
          # logfile_rotation_max_archives = 5

          ## Pick a timezone to use when logging or type 'local' for local time.
          ## Example: America/Chicago
          # log_with_timezone = ""

          ## Override default hostname, if empty use os.Hostname()
          # hostname = ""
          ## If set to true, do no set the "host" tag in the telegraf agent.
          # omit_hostname = false

          ## Method of translating SNMP objects. Can be "netsnmp" (deprecated) which
          ## translates by calling external programs snmptranslate and snmptable,
          ## or "gosmi" which translates using the built-in gosmi library.
          # snmp_translator = "netsnmp"

          ## Name of the file to load the state of plugins from and store the state to.
          ## If uncommented and not empty, this file will be used to save the state of
          ## stateful plugins on termination of Telegraf. If the file exists on start,
          ## the state in the file will be restored for the plugins.
          # statefile = ""

          ## Flag to skip running processors after aggregators
          ## By default, processors are run a second time after aggregators. Changing
          ## this setting to true will skip the second run of processors.
          # skip_processors_after_aggregators = false
          [[inputs.cpu]]
          [[inputs.disk]]
          [[inputs.diskio]]
          [[inputs.mem]]
          [[inputs.processes]]
          [[inputs.system]]
          [[outputs.influxdb_v2]]
             urls=["https://influx.hnatekmar.xyz"]
             token="${CUSTOM_TOKEN?token not found}"

    - path: /etc/containers/registries.conf.d/mirrors.conf
      mode: 0644
      contents:
        inline: |
          [[registry]]
          location="mirror-docker-io.hnatekmar.xyz"
          prefix="docker.io"

          [[registry]]
          location="mirror-gcr-io.hnatekmar.xyz"
          prefix="gcr.io"

          [[registry]]
          location="mirror-ghcr-io.hnatekmar.xyz"
          prefix="ghcr.io"

          [[registry]]
          location="mirror-quay-io.hnatekmar.xyz"
          prefix="quay.io"

    - path: /etc/yum.repos.d/telegraf.repo
      mode: 0755
      contents:
        inline: |
          [influxdata]
          name = InfluxData Repository - Stable
          baseurl = https://repos.influxdata.com/stable/x86_64/main
          enabled = 1
          gpgcheck = 1
          gpgkey = https://repos.influxdata.com/influxdata-archive_compat.key
    - path: /etc/profile.d/zz-defaults.sh
      contents:
        inline: |
          export EDITOR=vim
    - path: /etc/profile.d/zz-openbao.sh
      mode: 0755
      contents:
        inline: |-
          export VAULT_ADDR=https://openbao.hnatekmar.xyz
          export BAO_ADDR=https://openbao.hnatekmar.xyz
    - path: /etc/proxy.env
      mode: 0644
      contents:
        inline: |-
          http_proxy="http://172.16.100.61:3128"